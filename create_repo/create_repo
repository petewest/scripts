#!/usr/bin/env ruby

require 'optparse'

FOLDER_SEPARATOR='/'

# default folder locations
default_folders = {
  :repo => '/var/git',
  :working => '/var/rails'
}

# arguments will have project name and optional list of users
options = {
  :users => %w(git),
  :folders => {}
}

created_folders=[]

parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options] <project>"

  opts.on("-r", "--repository [REPO_FOLDER]", "Folder to use for bare source repository", "Defaults to #{default_folders[:repo]}/<project>.git") do |repo_folder|
    options[:folders][:repo]=repo_folder
  end

  opts.on("-w", "--working [WORKING_FOLDER]", "Folder to use for working folder","(checked-out source)","Defaults to #{default_folders[:working]}/<project>") do |working_folder|
    options[:folders][:working]=working_folder
  end

  opts.on("-g", "--group [GROUP]", "Group name to use (will use project name if not specified)") do |group|
    options[:group]=group
  end

  opts.on("-u", "--user [USER]", "Add user to the source control group (can be specified multiple times)") do |user|
    options[:users]<<user
  end

  opts.on("--not_current_user", "Don't add the current user to the repo access list") do 
    options[:not_current_user]=true
  end

  opts.on_tail("-h", "--help", "Show this screen") do
    puts opts
    exit
  end

end

# Start a begin..rescue block so that we can raise for errors
begin

  def create_group(group_name, project, *users)
    # remove any dodgy characters from group name
    group_name=group_name.gsub(/[^\w]/,"_")

    # OS X specific group creation

    # Check if group already exists
    # by finding the list of all groups, and their group id
    existing_groups=`dscl . list /Groups gid`.split("\n")
    # Split each line to [group, id], then create a hash
    existing_groups=existing_groups.map(&:split).to_h

    group_id=existing_groups.values.map(&:to_i).max + 1

    raise "Group #{group_name} already exists." if existing_groups.has_key?(group_name)

    # Group creation commands
    base="create /Groups/#{group_name}"
    group_commands=[]
    group_commands<<base
    # Set the name
    group_commands<<%Q{#{base} RealName 'Group for source control on #{project}'}
    group_commands<<%Q{#{base} passwd '*'}
    group_commands<<%Q{#{base} gid #{group_id}}
    # Add users to group
    users.each.with_index do |user, index|
      # Have to process it differently if it's the first or subsequent
      if index==0
        group_commands<<%Q{#{base} GroupMembership #{user}}
      else
        group_commands<<%Q{append /Groups/#{group_name} GroupMembership #{user}}
      end
    end

    result=`echo "#{group_commands.join("\n")}" | dscl .`
    #Check for errors here...
    raise "Failed to create group" if /DS Error/.match(result)
  end

  def create_folder(folder_name)
    raise "#{folder_name} already exists" if Dir.exist?(folder_name)
    puts "Creating folder: #{folder_name}"
    begin
      Dir.mkdir(folder_name)
    rescue SystemCallError
      raise "Couldn't create folder."
    end
    created_folders<<folder_name
  end

  project=parser.parse!(ARGV).first

  if project.nil?
    raise parser.help
  end

  if /[^\w]/.match(project)
    raise "Project name contains invalid characters (only letters, numbers and _ allowed)"
  end

  # Set up any other options
  options[:users]<<`whoami`.chomp unless options[:not_current_user]

  options[:group]=project if options[:group].nil?

  create_group(options[:group], project, *options[:users])

  options[:folders][:repo]="#{default_folders[:repo]}#{FOLDER_SEPARATOR}#{project}.git" unless options[:folders][:repo]
  options[:folders][:working]="#{default_folders[:working]}#{FOLDER_SEPARATOR}#{project}" unless options[:folders][:working]
  options[:folders].each do |name, folder|
    create_folder(folder)
  end

  # Initialize the bare repo
  puts "Initialiazing bare git repo"
  result=`git init --bare #{options[:folders][:repo]}`

  # Now set the ownership and permissions on the created folders and files
  created_folders.each do |folder|
    # change folder ownership
    `chown -R git:#{options[:group]} "#{folder}"`
    # and change folder permissions
    `chmod -R og+rwx "#{folder}"`
  end
rescue => e
  abort(e.message)
end
